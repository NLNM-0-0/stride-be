version: '3.8'

name: stride

services:
  identity-ms:
    build:
      context: ./identity-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: identity-ms
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network
  bridge-ms:
    build:
      context: ./bridge-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: bridge-ms
    depends_on:
      mongo-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network
  profile-ms:
    build:
      context: ./profile-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: profile-ms
    depends_on:
      mongo-db:
        condition: service_healthy
    ports:
      - "8083:8083"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network
  core-ms:
    build:
      context: ./core-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: identity-ms
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8084:8084"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network
  gateway:
    build:
      context: ./api-gateway
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: gateway-ms
    depends_on:
      - identity-ms
      - bridge-ms
      - profile-ms
      - core-ms
    ports:
      - "8080:8080"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network
  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka
    hostname: kafka
    restart: always
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_MESSAGE_MAX_BYTES=2000000
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=2000000
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - stride-network
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 3
  postgres-db:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: stride
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./z-etc/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    restart: on-failure
    networks:
      - stride-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
  mongo-db:
    build:
      context: z-etc/mongo
    container_name: mongo-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    restart: on-failure
    networks:
      - stride-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--username", "${MONGO_INITDB_ROOT_USERNAME}", "--password", "${MONGO_INITDB_ROOT_PASSWORD}" ]
      interval: 30s
      timeout: 10s
      retries: 3
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - stride-network
  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    networks:
      - stride-network


networks:
  stride-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
