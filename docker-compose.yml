version: '3.8'

name: stride

services:
  identity-ms:
    build:
      context: ./identity-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: identity-ms
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network

  bridge-ms:
    build:
      context: ./bridge-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: bridge-ms
    depends_on:
      mongo-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network

  profile-ms:
    build:
      context: ./profile-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: profile-ms
    depends_on:
      mongo-db:
        condition: service_healthy
    ports:
      - "8083:8083"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network

  core-ms:
    build:
      context: ./core-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: core-ms
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8084:8084"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network

  metric-ms:
    build:
      context: ./metric-service
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: metric-ms
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8085:8085"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network

  gateway:
    build:
      context: ./api-gateway
      dockerfile: deploy/dev.dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    container_name: gateway-ms
    depends_on:
      - identity-ms
      - bridge-ms
      - profile-ms
      - core-ms
      - metric-ms
    ports:
      - "8080:8080"
    restart: on-failure
    env_file:
      .env
    networks:
      - stride-network

  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka
    hostname: kafka
    restart: always
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_MESSAGE_MAX_BYTES=2000000
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=2000000
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - stride-network
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-db:
    image: timescale/timescaledb-postgis:latest-pg13
    container_name: postgres-db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: stride
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./z-etc/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    restart: on-failure
    networks:
      - stride-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo1:
    image: mongo:6.0.13-jammy
    container_name: mongo1
    command:
      - /bin/sh
      - -c
      - |
        chmod 400 /etc/mongo-keyfile
        chown 999:999 /etc/mongo-keyfile
        mongod --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    volumes:
      - ./z-etc/mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo1-data:/data/db
    ports:
      - 27017:27017
    restart: on-failure
    networks:
      - stride-network

  mongo2:
    image: mongo:6.0.13-jammy
    container_name: mongo2
    command:
      - /bin/sh
      - -c
      - |
        chmod 400 /etc/mongo-keyfile
        chown 999:999 /etc/mongo-keyfile
        mongod --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    volumes:
      - ./z-etc/mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo2-data:/data/db
    restart: on-failure
    networks:
      - stride-network

  mongo3:
    image: mongo:6.0.13-jammy
    container_name: mongo3
    command:
      - /bin/sh
      - -c
      - |
        chmod 400 /etc/mongo-keyfile
        chown 999:999 /etc/mongo-keyfile
        mongod --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    volumes:
      - ./z-etc/mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo3-data:/data/db
    restart: on-failure
    networks:
      - stride-network

  mongo-setup:
    image: mongo:6.0.13-jammy
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - stride-network
    entrypoint: >
      bash -c "
      until mongosh mongodb://root:123456@mongo1:27017/admin --eval 'db.adminCommand({ping:1})' > /dev/null 2>&1; do
        echo 'Waiting for mongo1 to be ready...';
        sleep 5;
      done;
      mongosh mongodb://root:123456@mongo1:27017/admin --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongo1:27017\" },
            { _id: 1, host: \"mongo2:27017\" },
            { _id: 2, host: \"mongo3:27017\" }
          ]
        })
      '
      "

  loki:
    image: grafana/loki:3.5
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    networks:
      - stride-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - stride-network

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: unless-stopped
    ports:
      - "3200:3200"
      - "4317"
    command: [ "-config.file=/etc/tempo-config.yml" ]
    volumes:
      - ./z-etc/log/tempo-config.yml:/etc/tempo-config.yml
    networks:
      - stride-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    container_name: otel-collector
    restart: always
    command: [ "--config=/etc/otelcol-contrib/otel-collector.yml" ]
    volumes:
      - ./z-etc/log/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - loki
      - tempo
      - prometheus
    networks:
      - stride-network

  grafana:
    image: grafana/grafana:12.0.1
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - loki
      - tempo
      - prometheus
    volumes:
      - ./z-etc/log/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"
    networks:
      - stride-network


networks:
  stride-network:
    driver: bridge

volumes:
  postgres-data:
  mongo1-data:
  mongo2-data:
  mongo3-data: