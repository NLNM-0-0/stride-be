version: '3.8'

name: stride-dev

services:
  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka
    hostname: kafka
    restart: always
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_MESSAGE_MAX_BYTES=2000000
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=2000000
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - stride-network
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 3
  postgres-db:
    image: timescale/timescaledb-postgis:latest-pg13
    container_name: postgres-db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: stride
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./z-etc/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    restart: on-failure
    networks:
      - stride-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo1:
    image: mongo:6.0.13-jammy
    container_name: mongo1
    command: >
      bash -c "
        chmod 400 /etc/mongo-keyfile &&
        chown 999:999 /etc/mongo-keyfile &&

        # B1: Chạy mongod KHÔNG có --keyFile để tạo user
        mongod --replSet rs0 --bind_ip_all --fork --logpath /var/log/mongodb.log

        # Đợi mongod sẵn sàng
        until mongosh --eval 'db.adminCommand({ ping: 1 })' >/dev/null 2>&1; do
          echo '⏳ Waiting for MongoDB to be ready...'
          sleep 2
        done

        echo '✅ MongoDB is ready. Running init script...'
        bash /mongo-init.sh

        # Dừng mongod
        mongod --shutdown

        # B2: Khởi động lại mongod với auth (keyFile)
        mongod --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
      "
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    volumes:
      - ./z-etc/mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo1-data:/data/db
      - ./z-etc/mongo/mongo-init.sh:/mongo-init.sh
    ports:
      - 27017:27017
    restart: on-failure
    healthcheck:
      test: [
        "CMD", "mongosh",
        "--username", "root",
        "--password", "123456",
        "--authenticationDatabase", "admin",
        "--eval", "db.adminCommand('ping')"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stride-network

  mongo2:
    image: mongo:6.0.13-jammy
    container_name: mongo2
    command:
      - /bin/sh
      - -c
      - |
        chmod 400 /etc/mongo-keyfile
        chown 999:999 /etc/mongo-keyfile
        mongod --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    volumes:
      - ./z-etc/mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo2-data:/data/db
    restart: on-failure
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stride-network

  mongo3:
    image: mongo:6.0.13-jammy
    container_name: mongo3
    command:
      - /bin/sh
      - -c
      - |
        chmod 400 /etc/mongo-keyfile
        chown 999:999 /etc/mongo-keyfile
        mongod --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    volumes:
      - ./z-etc/mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo3-data:/data/db
    restart: on-failure
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stride-network

networks:
  stride-network:
    driver: bridge

volumes:
  postgres-data:
  mongo1-data:
  mongo2-data:
  mongo3-data:
